#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Evidence Stitching API',
        projectUrlStr: 'https://github.com/hmcts/rpa-em-stitching-api'
    ],
    pipelineTriggers([
        [$class: 'GitHubPushTrigger']
    ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "em"
def component = "stitching"

def secrets = [
        's2s-${env}': [
               secret('microservicekey-em-gw', 'FUNCTIONAL_TEST_CLIENT_S2S_TOKEN'),
               secret('microservicekey-ccd-gw', 'FUNCTIONAL_TEST_CCD_GW_SERVICE_SECRET'),
               secret('microservicekey-xui-webapp', 'FUNCTIONAL_TEST_XUI_WEBAPP_SERVICE_SECRET')
        ],
        'rpa-${env}': [
                secret('show-oauth2-token', 'FUNCTIONAL_TEST_CLIENT_OAUTH_SECRET')
        ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}

// Vars for Kubernetes
env.IDAM_API_BASE_URI = 'https://idam-api.aat.platform.hmcts.net'
env.OPEN_ID_API_BASE_URI = 'https://idam-web-public.aat.platform.hmcts.net/o'
env.S2S_BASE_URI = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
env.IDAM_WEBSHOW_WHITELIST = 'https://em-show-aat.service.core-compute-aat.internal/oauth2/callback'
env.DM_STORE_APP_URL = 'http://dm-store-aat.service.core-compute-aat.internal'
env.CCD_DEF_API = 'http://ccd-definition-store-api-aat.service.core-compute-aat.internal'
env.CCD_DATA_API = 'http://ccd-data-store-api-aat.service.core-compute-aat.internal'
env.CDAM_URL = 'http://ccd-case-document-am-api-aat.service.core-compute-aat.internal'
env.DOCMOSIS_ENDPOINT = 'https://docmosis.aat.platform.hmcts.net/rs/convert'
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

def vaultOverrides = [
        'preview' : 'aat',
        'spreview': 'saat'
]

GradleBuilder builder = new GradleBuilder(this, product)

withPipeline(type , product, component) {
    enableDbMigration('em-stitching')
    overrideVaultEnvironments(vaultOverrides)
    loadVaultSecrets(secrets)
    enableAksStagingDeployment()
    disableLegacyDeployment()
    onMaster {
        after('test') {
            sh '''
            curl https://raw.githubusercontent.com/hmcts/reform-api-docs/master/bin/publish-swagger-docs.sh > publish-swagger-docs.sh
            sh ./publish-swagger-docs.sh
             '''
        }
    }
    
    after('securityScan') {
        def time = "120"
        echo "Waiting ${time} seconds for deployment to complete prior starting functional testing"
        sleep time.toInteger() // seconds
        try {
          builder.gradle('functional')
        } finally {
          junit '**/test-results/**/*.xml'
        }
    }
    
    onMaster()
    {
       enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
    }

    after('test') {

           publishHTML target: [
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "build/reports/checkstyle",
              reportFiles          : "main.html",
              reportName           : "Stitching API Checkstyle Main Report"
          ]

          publishHTML target: [
              allowMissing         : true,
              alwaysLinkToLastBuild: true,
              keepAll              : true,
              reportDir            : "build/reports/checkstyle",
              reportFiles          : "test.html",
              reportName           : "Stitching API Checkstyle Test Report"
          ]

         publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/checkstyle",
                reportFiles          : "aat.html",
                reportName           : "Stitching API Checkstyle AAT Report"
         ]

         publishHTML target: [
                 allowMissing         : true,
                 alwaysLinkToLastBuild: true,
                 keepAll              : true,
                 reportDir            : "build/reports/checkstyle",
                 reportFiles          : "contractTest.html",
                 reportName           : "Stitching API Checkstyle PACT Report"
         ]

         publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/test",
                reportFiles          : "index.html",
                reportName           : "Stitching API Unit Tests Report"
         ]
    }

    after('smoketest:preview') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/smoke",
                reportFiles          : "index.html",
                reportName           : "Stitching API Smoke Test Report"
        ]
    }

    after('smoketest:aat') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/smoke",
                reportFiles          : "index.html",
                reportName           : "Stitching API Smoke Test Report"
        ]
    }

    after('functionalTest:preview') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : "index.html",
                reportName           : "Stitching API Functional Test Report"
        ]
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('functionalTest:aat') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/functional",
                reportFiles          : "index.html",
                reportName           : "Stitching API Functional Test Report"
        ]

       steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
    }

    after('pactconsumerVerification:preview') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/contract",
                reportFiles          : "index.html",
                reportName           : "Stitching API Contract Test Report"
        ]
    }

    after('pactconsumerVerification:aat') {
        publishHTML target: [
                allowMissing         : true,
                alwaysLinkToLastBuild: true,
                keepAll              : true,
                reportDir            : "build/reports/tests/contract",
                reportFiles          : "index.html",
                reportName           : "Stitching API Contract Test Report"
        ]
    }
//    syncBranchesWithMaster(['demo', 'perftest', 'ithc'])
}
