server:
  port: 4630
spring:
  application:
    name: EM Stitching API
  config:
    import: "optional:configtree:/mnt/secrets/em-stitching/"
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    database: postgresql
    show-sql: ${SHOW_SQL:false}
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
        implicit-strategy: org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy
    properties:
      hibernate:
        id:
          db_structure_naming_strategy: legacy
        temp:
          use_jdbc_metadata_defaults: false
  datasource:
    url: jdbc:postgresql://${SPRING_DATASOURCE_HOST:localhost}:${SPRING_DATASOURCE_PORT:6432}/${SPRING_DATASOURCE_NAME:emstitch}${SPRING_DATASOURCE_OPTIONS:?ssl=disable}
    username: ${SPRING_DATASOURCE_USERNAME:postgres}
    password: ${SPRING_DATASOURCE_PASSWORD:postgres}
    tomcat:
      max-active: ${MAX_ACTIVE_DB_CONNECTIONS:50} # Maximum number of active connections that can be allocated from this pool at the same time.
      max-idle: ${MAX_IDLE_DB_CONNECTIONS:25}
      max-wait: ${MAX_WAIT_DB_CONNECTIONS:10000} # Number of ms to wait before throwing an exception if no connection is available.
      test-on-borrow: ${TEST_ON_BORROW_DB_CONNECTION:true}
    type: com.zaxxer.hikari.HikariDataSource
    hikari:
      auto-commit: false
  batch:
    job:
      enabled: false
      cron: ${JOB_CRON_EXPRESSION:"*/5 * * * * *"}
    initialize-schema: never
    document-task-milliseconds: ${DOCUMENT_TASK_MILLISECONDS:2000}
    # run cleanup every 1 hour (since a single execution should not run longer than 1 hour)
    historicExecutionsRetentionMilliseconds: ${HISTORIC_EXECUTIONS_RETENTION_MILLISECONDS:3600000}
    historicDocumentTasksCronJobSchedule: ${HISTORIC_DOCUMENT_TASKS_CRONJOB_SCHEDULE:0 15 22 * * ?}
    historicExecutionsRetentionEnabled: ${HISTORIC_EXECUTIONS_RETENTION_ENABLED:true}
    documenttask:
      numberofdays: ${HISTORIC_DOCUMENT_TASKS_NO_OF_RETENTION_DAYS:180}
      numberofrecords: ${HISTORIC_DOCUMENT_TASKS_NO_OF_RECORDS:1000}
  security:
    oauth2:
      client:
        provider:
          oidc:
            issuer-uri: ${OPEN_ID_API_BASE_URI:https://idam-web-public.aat.platform.hmcts.net/o}
        registration:
          oidc:
            client-id: microservicekey-em-stitching-api
            client-secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}

springdoc:
  packagesToScan: uk.gov.hmcts.reform.em.stitching.rest
  pathsToMatch: /**

docmosis:
  accessKey: ${DOCMOSIS_ACCESS_KEY:SOMETHING}
  convert.endpoint: ${DOCMOSIS_ENDPOINT:https://docmosis.aat.platform.hmcts.net/rs/convert}
  render.endpoint: ${DOCMOSIS_RENDER_ENDPOINT:https://docmosis.aat.platform.hmcts.net/rs/render}

management:
  endpoint:
    health:
      show-details: "always"
  endpoints:
    web:
      base-path: '/'
      exposure:
        include:
         - health
         - info
  health:
    db:
      enabled: true
    disk:
      enabled: true
      threshold: ${HEALTH_DISK_THRESHOLD:262144000}
    status:
     order:
       - FATAL
       - DOWN
       - UNKNOWN
       - UP
  info:
     build:
       enabled: true # Whether to enable build info.
     defaults:
       enabled: true # Whether to enable default info contributors.
     env:
       enabled: true # Whether to enable environment info.
     git:
       enabled: true # Whether to enable git info.
       mode: simple # Mode to use to expose git information.

info:
  app:
    environment: ${PACKAGES_ENVIRONMENT:local}
    project: ${PACKAGES_PROJECT:em-stitching}
    name: ${PACKAGES_NAME:cor}
#    version: ${PACKAGES_VERSION:unknown}

auth:
  idam:
    client:
      baseUrl: ${IDAM_API_BASE_URI:https://idam-api.aat.platform.hmcts.net}
  provider:
    service:
      client:
        baseUrl: ${S2S_BASE_URI:http://rpe-service-auth-provider-aat.service.core-compute-aat.internal}

# service-auth-provider-client lib
idam:
  api:
    url: ${IDAM_API_BASE_URI:https://idam-api.aat.platform.hmcts.net}
  s2s-auth:
    url: ${S2S_BASE_URI:http://rpe-service-auth-provider-aat.service.core-compute-aat.internal}
    totp_secret: ${S2S_KEY:AAAAAAAAAAAAAAAA}
    microservice: ${S2S_SERVICE_NAME:em_stitching_api}
  s2s-authorised:
    services: ${S2S_NAMES_WHITELIST:jui_webapp,em_ccd_orchestrator,em_gw}

azure:
  app_insights_key: ${APPINSIGHTS_INSTRUMENTATIONKEY:true}
  application-insights:
    instrumentation-key: ${APPINSIGHTS_INSTRUMENTATIONKEY:d30268e8-8979-4579-8d58-010dbe03a1e6}

app-insights:
  dev-mode: off
  request-component: on
  telemetry-component: on

dm-store-app:
  base-url: ${DM_STORE_APP_URL:http://dm-store-aat.service.core-compute-aat.internal}

case_document_am:
  url: ${CDAM_URL:http://localhost:4455}

task:
  env: ${TASK_ENV:documentTaskLock-local}

stitching-complete:
  callback:
    max-attempts: ${CALLBACK_MAX_ATTEMPTS:3}

dbMigration:
  # When true, the app will run DB migration on startup.
  # Otherwise, it will just check if all migrations have been applied (and fail to start if not).
  runOnStartup: ${RUN_DB_MIGRATION_ON_STARTUP:true}


feign:
  httpClient:
    connectTimeout: ${HTTP_CLIENT_CONNECT_TIMEOUT:30000}
    socketTimeout: ${HTTP_CLIENT_SOCKET_TIMEOUT:60000}

logging:
  level:
    uk.gov.hmcts.reform.authorisation.filters: DEBUG
    org.springframework.batch.core: WARN

scheduling:
  enabled: true
