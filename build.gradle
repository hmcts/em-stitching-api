buildscript {
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '2.1.3.RELEASE'
    id 'org.owasp.dependencycheck' version '5.0.0'
    id 'com.github.ben-manes.versions' version '0.21.0'
    id 'org.sonarqube' version '2.6.2'
    id 'jacoco'
    id 'checkstyle'
    id 'pmd'
    id 'org.liquibase.gradle' version '2.0.1'
    id "com.github.lkishalmi.gatling" version "3.0.1"
    id 'au.com.dius.pact' version '3.5.24'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'idea'

if (!project.hasProperty('runList')) {
    project.ext.runList = 'main'
}

group 'uk.gov.hmcts.reform.em.stitching'
version '0.0.1'
sourceCompatibility = 1.8
mainClassName = 'uk.gov.hmcts.reform.em.stitching.Application'

configurations {
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}


sourceSets {
    aat {
        scala {
            srcDirs = ['src/aat/java']
        }
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir('src/aat/java')
        }
        resources {
            srcDir('src/aat/resources')
        }
        compileClasspath += configurations.gatling
    }
    test {
        java.srcDir 'src/test/java'
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contactTest/resources')
    }
}

dependencies {
    compile "com.squareup.okhttp3:okhttp:3.11.0"
    compile "org.springframework.boot:spring-boot-starter-batch"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-security"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:2.9.9"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.9.9"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.9"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.9"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.9"
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.9"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:2.9.9"
    compile "org.zalando:problem-spring-web:0.24.0-RC.0"
    compile "io.springfox:springfox-swagger2:2.7.0"
    compile "io.springfox:springfox-swagger-ui:2.7.0"
    compile "org.apache.httpcomponents:httpclient:4.5.5"
    compile "org.liquibase:liquibase-core"
    compile "org.mapstruct:mapstruct-jdk8:1.2.0.Final"
    compile "org.postgresql:postgresql:42.2.6"
    compile "org.ehcache:ehcache"
    compile "org.hibernate:hibernate-core"
    compile "org.hibernate:hibernate-jcache"
    compile "org.hibernate:hibernate-entitymanager"
    compile "org.hibernate:hibernate-envers"
    compile "org.hibernate.validator:hibernate-validator"
    compile "pl.touk:throwing-function:1.3"
    compile "org.apache.tika:tika-core:1.20"
    compile "com.zaxxer:HikariCP"
    compile group: "org.apache.commons", name: "commons-lang3", version: "3.7"
    compile group: "com.microsoft.azure", name: "applicationinsights-core", version: "2.1.1"
    compile group: "commons-validator", name: "commons-validator", version: "1.6"
    compile group: 'org.apache.pdfbox', name: 'pdfbox', version: "2.0.13"
    compile group: "net.javacrumbs.shedlock", name: "shedlock-spring", version:"2.4.0"
    compile group: "net.javacrumbs.shedlock", name: "shedlock-provider-jdbc-template", version:"2.4.0"
    compile group: "uk.gov.hmcts.reform.auth", name: "auth-checker-lib", version: "2.1.3"
    compile group: "uk.gov.hmcts.reform", name: "service-auth-provider-client", version: "2.0.1"
    compile group: "uk.gov.hmcts.reform", name: "java-logging-appinsights", version: "5.0.1"
    compile group: "uk.gov.hmcts.reform", name: "java-logging-spring", version: "5.0.1"
    compile group: "uk.gov.hmcts.reform", name: "health-spring-boot-starter", version: "0.0.3"
    compile group: "uk.gov.hmcts.reform", name: "properties-volume-spring-boot-starter", version:"0.0.4"

    liquibaseRuntime "org.liquibase:liquibase-core"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:3.6"
    liquibaseRuntime sourceSets.main.compileClasspath
    liquibaseRuntime sourceSets.main.output
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:2.0.1"
    liquibaseRuntime "org.postgresql:postgresql"
    liquibaseRuntime "com.h2database:h2"

    annotationProcessor "org.mapstruct:mapstruct-processor:1.2.0.Final"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen"
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor") {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile 'com.github.gmazzo:okhttp-mock:1.0.4'
    testCompile 'io.rest-assured:rest-assured:3.2.0'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    testCompile "org.junit.jupiter:junit-jupiter-api:5.3.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.3.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.2"

    //pact contract testing
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: '3.5.24'
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: "3.5.24"

    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.3.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.3.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.3.2')

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath
}

//loading properties file.
Properties liquibaseProps = new Properties()
liquibaseProps.load(new FileInputStream("$projectDir/src/main/resources/liquibase.properties"))

liquibase {
    activities {
        main {
            driver liquibaseProps.getProperty('driver')
            url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
            username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
            password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
            changeLogFile liquibaseProps.getProperty('changeLogFile')
            referenceUrl liquibaseProps.getProperty('referenceUrl')
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
        diffLog {
            driver liquibaseProps.getProperty('driver')
            url project.hasProperty("dburl") ? "jdbc:postgresql://$dburl" : liquibaseProps.getProperty('url')
            username project.hasProperty("flyway.user") ? "${rootProject.properties['flyway.user']}" : liquibaseProps.getProperty('username')
            password project.hasProperty("flyway.password") ? "${rootProject.properties['flyway.password']}" : liquibaseProps.getProperty('password')
            changeLogFile liquibaseProps.getProperty('changeLogFile')
            referenceUrl liquibaseProps.getProperty('referenceUrl')
            defaultSchemaName ''
            logLevel 'debug'
            classpath 'src/main/resources/'
        }
    }

    runList = project.ext.runList
}

liquibaseDiff.dependsOn compileJava
liquibaseDiffChangeLog.dependsOn compileJava

bootJar {
    baseName 'rpa-em-stitching-api'
    archiveName = "$baseName"+".jar"
    destinationDir = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 11 : 0
    suppressionFile = 'config/owasp/dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.8'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = "6.11.0"
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSetFiles = files("config/pmd/ruleset.xml")
}



def coverageExclusionList = [
    '**uk/gov/hmcts/reform/em/stitching/Application*',
    '**uk/gov/hmcts/reform/em/stitching/appinsights/*',
    '**uk/gov/hmcts/reform/em/stitching/config/*',
    '**uk/gov/hmcts/reform/em/stitching/config/logging/*',
    '**uk/gov/hmcts/reform/em/stitching/config/audit/*',
    '**uk/gov/hmcts/reform/em/stitching/info/*',
    '**uk/gov/hmcts/reform/em/stitching/service/mapper/*',
    '**uk/gov/hmcts/reform/em/stitching/domain/EntityAuditEvent',
    '**uk/gov/hmcts/reform/em/stitching/service/dto/*',
]

jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true

        xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.dependencyCheck.reportPath", "${project.buildDir}/reports/dependency-check-report.xml"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}


configurations {
    gatling
}

gatling {
    logLevel = "INFO"
}

task gatlingRunAAT(type: JavaExec) {
    group = 'gatling'
    description = 'Run gatling tests'
    new File("${buildDir}/reports/tests/performance").mkdirs()
    classpath = sourceSets.aat.runtimeClasspath + configurations.gatling
    main = "io.gatling.app.Gatling"
    args = ['-s', 'uk.gov.hmcts.reform.em.stitching.performance.NpaLoad',
            '-rf', "${buildDir}/reports/tests/performance"
    ]
}

task gatlingRunSmoke(type: JavaExec) {
    group = 'gatling'
    description = 'Run gatling tests'
    new File("${buildDir}/reports/tests/performance").mkdirs()
    classpath = sourceSets.aat.runtimeClasspath + configurations.gatling
    main = "io.gatling.app.Gatling"
    args = ['-s', 'uk.gov.hmcts.reform.em.stitching.performance.NpaSmoke',
            '-rf', "${buildDir}/reports/tests/performance"
    ]
}

task functional(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/stitching/functional/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/em/stitching/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task migratePostgresDatabase(dependsOn: 'liquibaseUpdate')

compileJava.dependsOn processResources

task contract(type: Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include "uk/gov/hmcts/reform/em/stitching/**"
    systemProperty 'pact.rootDir', "${rootDir}/pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}
